#lang racket

(define (inc n)
  (+ n 1))

;;; ordered elements
(define (make-elem pri val)
  (cons pri val))

(define (elem-priority x)
  (car x))

(define (elem-val x)
  (cdr x))

;;; leftist heaps (after Okasaki)

;; data representation
(define leaf 'leaf)

(define (leaf? h) (eq? 'leaf h))

(define (hnode? h)
  (and (list? h)
       (= 5 (length h))
       (eq? (car h) 'hnode)
       (natural? (caddr h))))

(define (make-node elem heap-a heap-b)
  ;; Procedura tworząca nowy kopiec, czyli pięcioelementową listę. Pierwszym elementem jest symbol hnode,
  ;; drugi to element będący w wierzchołku nowo utworzonego drzewa, podany jako argument,
  ;; trzecim elementem listy jest ranga nowego kopca, czyli ranga prawego poddrzewa zwiększona o 1.
  ;; Czwarty i piąty element to odpowiednio lewe i prawe poddrzewa. O tym, które poddrzewo zostanie prawym,
  ;; a które lewym decyduje to, które z nich ma mniejszą rangę. 
  (let ((rank-a (rank heap-a))
        (rank-b (rank heap-b)))    
   (if (<= rank-a rank-b)
       (list `hnode elem (inc rank-a) heap-b heap-a)
       (list `hnode elem (inc rank-b) heap-a heap-b))))

(define (node-elem h)
  (second h))

(define (node-left h)
  (fourth h))

(define (node-right h)
  (fifth h))

(define (hord? p h)
  (or (leaf? h)
      (<= p (elem-priority (node-elem h)))))

(define (heap? h)
  (or (leaf? h)
      (and (hnode? h)
           (heap? (node-left h))
           (heap? (node-right h))
           (<= (rank (node-right h))
               (rank (node-left h)))
           (= (rank h) (inc (rank (node-right h))))
           (hord? (elem-priority (node-elem h))
                  (node-left h))
           (hord? (elem-priority (node-elem h))
                  (node-right h)))))

(define (rank h)
  (if (leaf? h)
      0
      (third h)))

;; operations

(define empty-heap leaf)

(define (heap-empty? h)
  (leaf? h))

(define (heap-insert elt heap)
  (heap-merge heap (make-node elt leaf leaf)))

(define (heap-min heap)
  (node-elem heap))

(define (heap-pop heap)
  (heap-merge (node-left heap) (node-right heap)))

(define (heap-merge h1 h2)
  ;; Procedura do łączenia dwóch kopców w jeden, zachowujący wszystkie właściwości tej struktury danych
  ;; Jeśli jeden z kopców jest pusty wynikiem jest drugi z podanych jako argumenty.
  ;; Jeśli oba są niepuste wybierany jest elementy o najmniejszych priorytetach z danych kopców.
  ;; Wynikiem jest kopiec,w wierzchołku którego jest element o najmniejszym prirytecie, jednym jego poddrzewem
  ;; jest lewe poddrzewo kopca z którego pochodzi element o najmniejszym priorytecie, a drugim rekurencyjnie
  ;; połaczone prawo poddrzewo kopca z którego pochodzi element o najmniejszym priorytecie z drugim kopcem.
  (cond
   [(leaf? h1) h2]
   [(leaf? h2) h1]
   [else
    (let* ((e1 (heap-min h1))
           (e2 (heap-min h2))
           (p1 (elem-priority e1))
           (p2 (elem-priority e2)))
      (if (< p1 p2)
          (let ((hl (node-left h1))
                (hr (node-right h1)))
            (make-node e1 hl (heap-merge h2 hr)))
          (let ((hl (node-left h2))
                (hr (node-right h2)))
            (make-node e2 hl (heap-merge h1 hr)))))]))

;;; heapsort. sorts a list of numbers.
(define (heapsort xs)
  (define (popAll h)
    (if (heap-empty? h)
        null
        (cons (elem-val (heap-min h)) (popAll (heap-pop h)))))
  (let ((h (foldl (lambda (x h)
                    (heap-insert (make-elem x x) h))
            empty-heap xs)))
    (popAll h)))

;;; check that a list is sorted (useful for longish lists)
(define (sorted? xs)
  (cond [(null? xs)              true]
        [(null? (cdr xs))        true]
        [(<= (car xs) (cadr xs)) (sorted? (cdr xs))]
        [else                    false]))

;;; generate a list of random numbers of a given length
(define (randlist len max)
  (define (aux len lst)
    (if (= len 0)
        lst
        (aux (- len 1) (cons (random max) lst))))
  (aux len null))

;; Testy
(define (test n)
  ;; Procedura pomocnicza do przeprowadzania testów, sprawdzająca, czy dzięki nowo utworzonej strukturze danych
  ;; można efektywnie i prawidłowo sortować listę o podanej długości, składających się z losowych liczb.
  (sorted? (heapsort (randlist n (/ n 2)))))

;; (test 100)
;; (test 1000)
;; (test 10000)
;; (test 100000)
